{"version":3,"sources":["hoc/Aux.js","components/Board/Board.js","components/Board/Controllers/Colors.js","components/Board/Controllers/Frames.js","containers/BoardBuilder/BoardBuilder.js","components/Navbar/Navbar.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["aux","props","children","Board","pixels","h","height","row","w","num","width","push","key","style","backgroundColor","frame","className","onClick","pixelClicked","onMouseDown","BASICS","colors","currentColor","sketchColor","Button","sketchSelectClicked","color","disableAlpha","presetColors","onChange","sketchChangeHandler","Frames","React","useState","anchorEl","setAnchorEl","aria-controls","aria-haspopup","event","currentTarget","startIcon","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","addFrameHandler","arrowHandler","BoardBuilder","palletColorHandler","setState","pixelColorHandler","index","tempFrame","state","currentFrame","hex","type","newFrame","Array","WIDTH","fill","frameNum","animation","splice","direction","console","log","boardWidth","boardHeight","history","Colors","this","Component","useStyles","makeStyles","navbar_title","fontSize","fontWeight","flexGrow","textAlign","navbar_options","display","justifyContent","navbar_option","marginRight","marginTop","marginBottom","navbar_button","MenuAppBar","classes","auth","setAuth","handleClose","AppBar","position","Toolbar","Typography","variant","IconButton","aria-label","anchorOrigin","vertical","horizontal","transformOrigin","layout","Aux","App","Layout","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57e7a6f1.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;","import React from 'react';\nimport './Board.css'\n\nconst Board = (props) => {\n\n    let pixels = [];\n\n    for(let h=0; h<props.height; h++){\n        let row = [];\n\n        for(let w=0; w<props.width; w++){\n            let num;\n\n            if(h%2 === 0)\n                num = h * props.width + w;\n            else \n                num = h * props.width - w + props.width - 1;\n\n            row.push(\n                <div\n                    key={\"pixel\" + num}\n                    style={{backgroundColor: props.frame[num]}}\n                    className={\"board__pixel\"}\n                    onClick={() => props.pixelClicked(num)}\n                    onMouseDown={() => props.pixelClicked(num) }\n                />\n            )\n        }\n        \n        pixels.push(<div \n                className=\"board__row\" \n                key={\"rowBoard\" + h}>{row}</div>) \n    }\n\n    return(\n            <div>\n                {pixels}\n            </div>\n        );\n}\n\nexport default Board;","import React, {Component, Fragment} from 'react';\n\nimport { SketchPicker } from 'react-color';\nimport Button from '@material-ui/core/Button';\n\nconst BASICS = ['#FF0000', '#FF8000', '#FFFF00', '#00FF00', '#00FFFF', '#7F00FF', '#FFFFFF', \"#000000\"];\nconst colors = (props) => {\n\n    return(\n        <div className={\"colors__colors\"}>\n                <span>Current Color</span>\n                <div \n                    className=\"colors__color\" \n                    style={{backgroundColor: props.currentColor}}/>\n                <span>Sketch Color</span>\n                <div className=\"colors__sketch\">\n                    <div \n                        className=\"colors__color\" \n                        style={{backgroundColor: props.sketchColor}}/>\n                    <Button \n                        className={\"colors__select_button\"}\n                        onClick={props.sketchSelectClicked}>Select</Button>\n                </div>\n            <SketchPicker\n                color={props.sketchColor}\n                disableAlpha={true}\n                presetColors={BASICS}\n                onChange={props.sketchChangeHandler}/>\n        </div>\n    )\n};\n\nexport default colors;","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport default function Frames(props) {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    \n    return(\n        <div>\n            <Button\n                aria-controls=\"simple-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                startIcon={<AddIcon/>}\n                style={{ backgroundColor: \"lime\" }} > Add </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => props.addFrameHandler(\"new\")}>New</MenuItem>\n                <MenuItem onClick={() => props.addFrameHandler(\"copy\")}>Copy</MenuItem>\n            </Menu>\n            <ArrowUpwardIcon  onClick={() => this.arrowHandler(\"back\")}/>\n            <ArrowDownwardIcon  onClick={() => this.arrowHandler(\"forward\")}/>\n        </div>\n    )\n};\n\n;","import React, {Component, Fragment} from 'react';\n\nimport './BoardBuilder.css';\n\nimport Board from '../../components/Board/Board';\nimport Colors from '../../components/Board/Controllers/Colors';\nimport Frames from '../../components/Board/Controllers/Frames';\n\nconst WIDTH = 15;\nconst HEIGHT = 15;\nconst SIZE = WIDTH  * HEIGHT; \nconst DEFAULT_COLOR = \"#000000\";\n\nclass BoardBuilder extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            boardWidth: WIDTH,\n            boardHeight: HEIGHT,\n            animation: [],\n            currentFrame: [],\n            frame: 0,\n            currentColor: DEFAULT_COLOR,\n            history: [],\n            sketchColor: \"#FFFFFF\"\n        }\n\n        let frame = new Array(SIZE);\n        frame.fill(DEFAULT_COLOR);\n        this.state.currentFrame = frame;\n    }\n\n    palletColorHandler = (color) => {\n        this.setState({currentColor: color})\n    }\n\n    pixelColorHandler = (index) => {\n        let tempFrame = [...this.state.currentFrame];\n        tempFrame[index] = this.state.currentColor;\n        this.setState({currentFrame: tempFrame});\n    }\n\n    sketchChangeHandler = (color) => {\n        this.setState({ sketchColor: color.hex });\n    };\n\n    addFrameHandler = (type) => {\n        let newFrame = new Array(SIZE);\n\n        if(type === \"new\")\n            newFrame.fill(DEFAULT_COLOR);\n        else if(type === \"copy\")\n            newFrame = this.state.currentFrame;\n    \n        const frameNum = this.state.frame + 1;\n        this.state.animation.splice(frameNum, 0, newFrame);\n\n        this.setState({\n           frame: frameNum,\n           currentFrame: newFrame\n        });\n    }\n\n    sketchSelectClicked = () => {\n        this.setState({ currentColor: this.state.sketchColor })\n    }\n\n    arrowHandler = (direction) => {\n        console.log(direction);\n    }\n\n    render(){\n        return(\n            <Fragment>\n                <div className={\"boardBuilder__container\"}>\n                    <Colors \n                        currentColor={this.state.currentColor}\n                        sketchColor={this.state.sketchColor}\n                        sketchChangeHandler={this.sketchChangeHandler}\n                        sketchSelectClicked={this.sketchSelectClicked}/>\n                    <Board \n                        width={this.state.boardWidth}\n                        height={this.state.boardHeight}\n                        frame={this.state.currentFrame}\n                        pixelClicked={this.pixelColorHandler} />\n                    <Frames \n                        addFrameHandler={this.addFrameHandler}/>\n                </div>\n            </Fragment>\n        );\n    };\n}\n\nexport default BoardBuilder;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles(() => ({\n    navbar_title:{\n        fontSize: '1.5rem',\n        fontWeight: 'bold',\n        flexGrow: 1,\n        textAlign: 'left'\n    },\n    navbar_options: {\n        flexGrow: 2,\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    navbar_option: {\n        fontSize: '1.3rem',\n        marginRight: '1.3rem',\n        marginTop: 'auto',\n        marginBottom: 'auto'\n    },\n    navbar_button: {\n        backgroundColor: 'chartreuse'\n    }\n}));\n\nexport default function MenuAppBar() {\n    const classes = useStyles();\n    const [auth, setAuth] = React.useState(true);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleLogout = () => {\n        handleClose();\n        setAuth(false);\n    };\n\n    const handleSignin = () => {\n        setAuth(true);\n    }\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <AppBar position=\"static\" >\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.navbar_title}>\n                        LED Matrix\n                    </Typography>\n                    {auth ? (\n                        <div className={classes.navbar_options}>\n                            <span className={classes.navbar_option}>Projects</span>\n                            <span className={classes.navbar_option}>Request</span>\n                            <IconButton\n                                aria-label=\"account of current user\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AccountCircle />\n                            </IconButton>\n                            <Menu\n                                id=\"menu-appbar\"\n                                anchorEl={anchorEl}\n                                anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'bottom',\n                                }}\n                                keepMounted\n                                transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'bottom',\n                                }}\n                                open={open}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                                <MenuItem onClick={handleLogout}>Log out</MenuItem>\n                            </Menu>\n                        </div>)\n                        : <Button onClick={handleSignin} className={classes.navbar_button}>Log in</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport Aux from \"../../hoc/Aux\";\nimport BoardBuilder from \"../../containers/BoardBuilder/BoardBuilder\";\nimport Navbar from \"../Navbar/Navbar\";\nconst layout = () => (\n    <Aux>\n        <Navbar />\n        <BoardBuilder />\n    </Aux>\n);\n\nexport default layout;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}